<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="luxe.chaos.choss.worker.dao.UserMapper">
    <resultMap id="userResultMap" type="luxe.chaos.choss.worker.entity.User">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="account" jdbcType="VARCHAR" property="account"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="create_time" jdbcType="VARCHAR" property="createTime"/>
        <result column="del_sign" jdbcType="INTEGER" property="delSign" />
    </resultMap>

    <select id="getById" parameterType="string" resultMap="userResultMap">
        select * from users a
        where a.del_sign = 0
        and a.id = #{id}
    </select>

    <select id="getByAccount" parameterType="string" resultMap="userResultMap">
        select * from users a
        where a.del_sign = 0
        and a.account = #{account}
    </select>

    <insert id="create" useGeneratedKeys="true"
            keyProperty="id" keyColumn="id"
            parameterType="luxe.chaos.choss.worker.entity.User">

        INSERT INTO users
        (id, account, name, password)
        VALUES
        (#{id} #{account}, #{name}, #{password})

    </insert>

<!--    <delete id="softDel" parameterType="integer" >-->
<!--        update users-->
<!--        set del_sign = 1-->
<!--        where id = #{id}-->
<!--    </delete>-->

    <update id="updatePassword" parameterType="string">
        update users
        set `password` = #{1}
        where id = "#{0}
    </update>

    <select id="searchResultCount" parameterType="string" resultType="long">
        select count(*) from users a
        where del_sign = 0
        and (a.account like #{q} or a.name like #{q})
    </select>

    <select id="searchResult" parameterType="hashmap" resultMap="userResultMap">
        select * from users a
        where del_sign = 0
        and (a.account like #{query} or a.name like #{query})
        order by create_time desc
        limit #{limit}
        offset #{offset}
    </select>

</mapper>